// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef remgui_h
#define remgui_h
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Menu_Bar.H>
#include <stdlib.h>
#include <stdio.h>
#include "donstructs.h"
extern BOOL connected; extern int sockfd;
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Input.H>
extern BOOL connected;
extern char onboard_hostname[128];
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Dial.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Roller.H>
#include <FL/Fl_Text_Display.H>
#include <MapView.h>

class RCDonatello {
public:
  RCDonatello();
  Fl_Window *mainWindow;
  Fl_Group *Input;
  Fl_Group *info;
  Fl_Value_Output *sim_time;
  Fl_Value_Output *cycle_time;
  Fl_Value_Output *speed;
  Fl_Value_Output *heading;
  Fl_Value_Output *odometer;
  Fl_Output *behave_state;
  Fl_Light_Button *LearningButton;
  Fl_Light_Button *InfoButton;
private:
  void cb_InfoButton_i(Fl_Light_Button*, void*);
  static void cb_InfoButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *MapButton;
private:
  void cb_MapButton_i(Fl_Light_Button*, void*);
  static void cb_MapButton(Fl_Light_Button*, void*);
public:
  Fl_Button *stop_start;
  Fl_Button *SickStatusButton;
  Fl_Button *UGR1StatusButton;
  Fl_Button *UGR2StatusButton;
  Fl_Round_Button *control_override;
  Fl_Menu_Bar *menubar;
  static Fl_Menu_Item menu_menubar[];
  static Fl_Menu_Item *file;
  static Fl_Menu_Item *disconnect;
private:
  void cb_disconnect_i(Fl_Menu_*, void*);
  static void cb_disconnect(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Save;
  static Fl_Menu_Item *QuitNoSave;
  static Fl_Menu_Item *QuitSaveAll;
  static Fl_Menu_Item *QuitSavePlastic;
  Fl_Double_Window *initWindow;
  Fl_Input *RemoteHostName;
  Fl_Button *ConnectButton;
private:
  void cb_ConnectButton_i(Fl_Button*, void*);
  static void cb_ConnectButton(Fl_Button*, void*);
public:
  Fl_Output *StatusDisplay;
  Fl_Button *QuitButton;
private:
  void cb_QuitButton_i(Fl_Button*, void*);
  static void cb_QuitButton(Fl_Button*, void*);
public:
  Fl_Double_Window *infoWindow;
  Fl_Group *output;
  Fl_Tabs *infoTabs;
  Fl_Group *gps_values;
  Fl_Group *gps_position;
  Fl_Value_Output *gps_lat;
  Fl_Value_Output *gps_long;
  Fl_Value_Output *gps_alt;
  Fl_Value_Output *gps_Vlat;
  Fl_Value_Output *gps_Vlong;
  Fl_Value_Output *gps_Valt;
  Fl_Value_Output *gps_fixtype;
  Fl_Value_Output *gps_yaw;
  Fl_Value_Output *gps_pitch;
  Fl_Value_Output *gps_roll;
  Fl_Value_Output *gps_Vyaw;
  Fl_Value_Output *gps_Vpitch;
  Fl_Value_Output *gps_Vroll;
  Fl_Group *nav_position;
  Fl_Value_Output *nav_lat;
  Fl_Value_Output *nav_long;
  Fl_Value_Output *nav_alt;
  Fl_Value_Output *nav_Vlat;
  Fl_Value_Output *nav_Vlong;
  Fl_Value_Output *nav_Valt;
  Fl_Value_Output *nav_Xacc;
  Fl_Value_Output *nav_Zacc;
  Fl_Value_Output *nav_yaw;
  Fl_Value_Output *nav_pitch;
  Fl_Value_Output *nav_roll;
  Fl_Value_Output *nav_Vyaw;
  Fl_Value_Output *nav_Vpitch;
  Fl_Value_Output *nav_Vroll;
  Fl_Group *ir_values;
  Fl_Group *pod_irs;
  Fl_Round_Button *ipod0;
  Fl_Round_Button *ipod1;
  Fl_Round_Button *ipod2;
  Fl_Round_Button *ipod3;
  Fl_Round_Button *ipodhead;
  Fl_Round_Button *ipodbody;
  Fl_Group *ir_data;
  Fl_Slider *ir1;
  Fl_Slider *ir2;
  Fl_Slider *ir3;
  Fl_Slider *ir4;
  Fl_Slider *ir5;
  Fl_Slider *ir6;
  Fl_Slider *ir7;
  Fl_Slider *ir8;
  Fl_Dial *horizon;
  Fl_Group *camera_values;
  Fl_Box *Left_camera;
  Fl_Box *Right_camera;
  Fl_Value_Slider *R_tilt;
  Fl_Value_Slider *L_tilt;
  Fl_Value_Slider *R_pan;
  Fl_Value_Slider *L_pan;
  Fl_Group *position_values;
  Fl_Value_Slider *pheight0;
  Fl_Value_Slider *pheight1;
  Fl_Value_Slider *pheight2;
  Fl_Value_Slider *pheight3;
  Fl_Value_Slider *pheight4;
  Fl_Roller *R_treads;
  Fl_Roller *L_treads;
  Fl_Dial *Leye_pan;
  Fl_Dial *Reye_pan;
  Fl_Group *sensor_values;
  Fl_Group *pods;
  Fl_Round_Button *spod0;
  Fl_Round_Button *spod1;
  Fl_Round_Button *spod2;
  Fl_Round_Button *spod3;
  Fl_Round_Button *spodhead;
  Fl_Round_Button *spodbody;
  Fl_Group *position;
  Fl_Value_Slider *pos_current;
  Fl_Value_Slider *pos_load;
  Fl_Value_Slider *pos_fb;
  Fl_Value_Slider *pos_velocity;
  Fl_Group *encoder;
  Fl_Value_Output *encoder0;
  Fl_Value_Output *encoder1;
  Fl_Value_Output *encoder2;
  Fl_Value_Output *encoder3;
  Fl_Group *pod_acc_values;
  Fl_Slider *sensor2x;
  Fl_Slider *sensor2y;
  Fl_Dial *sensor2gyro;
  Fl_Slider *sensor1x;
  Fl_Slider *sensor1y;
  Fl_Dial *sensor1gyro;
  Fl_Slider *sensor3x;
  Fl_Slider *sensor3y;
  Fl_Dial *sensor3gyro;
  Fl_Slider *sensor0x;
  Fl_Slider *sensor0y;
  Fl_Dial *sensor0gyro;
  Fl_Slider *sensorheadx;
  Fl_Slider *sensorheady;
  Fl_Dial *sensorheadgyro;
  Fl_Group *body_acc_values;
  Fl_Slider *sensorbodyxacc;
  Fl_Slider *sensorbodyyacc;
  Fl_Slider *sensorbodyzacc;
  Fl_Dial *sensorbodyxgyro;
  Fl_Dial *sensorbodyygyro;
  Fl_Dial *sensorbodyzgyro;
  Fl_Group *status_values;
  Fl_Value_Output *ir_value;
  Fl_Group *batt_grp;
  Fl_Round_Button *low_bat1;
  Fl_Round_Button *low_bat2;
  Fl_Round_Button *charging;
  Fl_Round_Button *ac_attached;
  Fl_Group *kvaser;
  Fl_Value_Output *read_incomplete_num;
  Fl_Value_Output *checksum_num;
  Fl_Double_Window *mapWindow;
  MapView *mapview;
  Fl_Roller *y_translate;
private:
  void cb_y_translate_i(Fl_Roller*, void*);
  static void cb_y_translate(Fl_Roller*, void*);
public:
  Fl_Roller *x_translate;
private:
  void cb_x_translate_i(Fl_Roller*, void*);
  static void cb_x_translate(Fl_Roller*, void*);
public:
  Fl_Roller *zoom;
private:
  void cb_zoom_i(Fl_Roller*, void*);
  static void cb_zoom(Fl_Roller*, void*);
public:
  void show(int argc, char **argv);
  BOOL isTab(Fl_Widget * querie);
};
#endif
